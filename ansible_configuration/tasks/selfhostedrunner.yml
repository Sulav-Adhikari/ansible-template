- name: Ensure ~/ops directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/ops"
    state: directory
    mode: '0755'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  become: true

- name: Ensure /ops/action-runner directory exists for each repository
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/ops/action-runner-{{ item.key }}"
    state: directory
    mode: '0755'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  loop: "{{ repositories | dict2items }}"
  become: true

- name: Ensure /ops/action-runner directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/ops/action-runner-{{ item.0.key }}/action-runner-{{ item.1 }}" #item.0.key accesses the name of the repository, and item.1 accesses the runner type,item.0: Represents the first element in each pair generated by the Cartesian product. In this case, it refers to the repository.item.1: Represents the second element in each pair generated by the Cartesian product. In this case, it refers to the runner type.
    state: directory
    mode: '0755'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  loop: "{{ repositories | dict2items | product(runner_for) }}" # The product filter generates the Cartesian product of these two lists, creating pairs of each repository with each runner type.
  become: true


# Check OS architecture of remote host and get the runner url   
- name: Set the runner URL based on architecture
  set_fact:
    runner_url: >-
      {% if ansible_facts['architecture'] == 'x86_64' %}
      https://github.com/actions/runner/releases/download/{{ latest_version }}/actions-runner-linux-x64-{{ runner_tar }}.tar.gz
      {% elif ansible_facts['architecture'] == 'aarch64' %}
      https://github.com/actions/runner/releases/download/{{ latest_version }}/actions-runner-linux-arm64-{{ runner_tar }}.tar.gz
      {% else %}
      https://github.com/actions/runner/releases/download/{{ latest_version }}/actions-runner-linux-arm-{{ runner_tar }}.tar.gz
      {% endif %}


# Extract the runner package name from URL

- name: Extract the package name
  set_fact:
    runner_package: "{{ runner_url.split('/')[-1] | trim }}"


# Print package url, os_arch,file name

- name: Print the selected runner URL
  debug:
    msg: "The runner URL is {{ runner_url }}"
- name: Print the extracted runner file name
  debug:
    msg: "{{ runner_package }}"
- name: Print OS architecture
  debug:
    msg: "{{ ansible_facts['architecture'] }}"

#Download the runner package 
- name: Download the latest runner package in ~/ops directory
  ansible.builtin.get_url:
    url: "{{ runner_url }}"
    dest: "{{ ansible_user_dir }}/ops/{{ runner_package }}"
    mode: '0644'
  become: true

#set owner and group for the downloaded package
- name: Set owner and group for the downloaded file
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/ops/{{ runner_package }}"
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  become: true

#Extract the runner package in all directory of runner_for
- name: Extract the runner package in each directory 
  ansible.builtin.command: 
    cmd: "sudo tar xzf {{ ansible_user_dir }}/ops/{{ runner_package }} -C {{ ansible_user_dir }}/ops/action-runner-{{ item.0.key }}/action-runner-{{ item.1 }}"
  loop: "{{ repositories | dict2items | product(runner_for) }}"
  become: true


#set owner and group for the extracted file

- name: Set owner and group for extracted files
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/ops/action-runner-{{ item.0.key }}/action-runner-{{ item.1 }}"
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    recurse: yes
  loop: "{{ repositories | dict2items | product(runner_for) }}"
  become: true


#Configure self hosted runner for all runner_for

- name: Run configuration script
  ansible.builtin.command: 
    cmd: "{{ ansible_user_dir }}/ops/action-runner-{{ item.0.key }}/action-runner-{{ item.1 }}/config.sh --unattended --url {{ repositories[item.0.key]['github_link'] }} --token {{ repositories[item.0.key]['action_token'] }} --name {{ item.1 }}" 
  loop: "{{ repositories | dict2items | product(runner_for) }}"
  become: false

#Install SVC on all runner_for i.e [api,web.backend]
- name: Install SVC for all 
  ansible.builtin.command:
    cmd: "sudo ./svc.sh install"
    chdir: "{{ ansible_user_dir }}/ops/action-runner-{{ item.0.key }}/action-runner-{{ item.1 }}"
  loop: "{{ repositories | dict2items | product(runner_for) }}"
  become: true


- name: Start SVC for all
  ansible.builtin.command: 
    cmd: "sudo ./svc.sh start"
    chdir: "{{ ansible_user_dir }}/ops/action-runner-{{ item.0.key }}/action-runner-{{ item.1 }}"
  loop: "{{ repositories | dict2items | product(runner_for) }}"
  become: true

# # # # - name: Start the runner
# # # #   ansible.builtin.command: 
# # # #     cmd: "{{ ansible_user_dir }}/ops/action-runner-{{ item }}/run.sh"
# # # #   loop: "{{ runner_for }}"
