# ###
- name: Get the latest action version
  shell: "curl -sL https://github.com/actions/runner/releases/latest | grep -m 1 -oP 'Release v\\d+\\.\\d+\\.\\d+' | cut -d ' ' -f 2"
  register: version

- set_fact:
    latest_version: "{{ version.stdout }}"

- debug:
    msg: "Latest version is {{ latest_version }}"

- set_fact:
    runner_tar: "{{ latest_version | replace ('v','') }}"

- debug:
    msg: "tar file is {{ runner_tar }}"
# ###

- name: Ensure ~/ops directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/ops"
    state: directory
    mode: '0755'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  become: true

- name: Ensure /ops/action-runner directory exists for each repository
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/ops/action-runner-{{ item.key }}"
    state: directory
    mode: '0755'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  loop: "{{ repositories | dict2items }}"
  become: true


- name: Create dynamic repository mappings
  set_fact:
    repo_directory_mapping: >-
      {{
        dict(
          runner_for | zip(repositories.keys() | list)
        )
      }}




- name: Ensure directories exist based on runner_for inside action-runner repositories
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/ops/action-runner-{{ repo_directory_mapping[item] }}/{{ item }}"
    state: directory
    mode: '0755'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  loop: "{{ runner_for }}"


# ######
# # Check OS architecture of remote host and get the runner url   
- name: Set the runner URL based on architecture
  set_fact:
    runner_url: >-
      {% if ansible_facts['architecture'] == 'x86_64' %}
      https://github.com/actions/runner/releases/download/{{ latest_version }}/actions-runner-linux-x64-{{ runner_tar }}.tar.gz
      {% elif ansible_facts['architecture'] == 'aarch64' %}
      https://github.com/actions/runner/releases/download/{{ latest_version }}/actions-runner-linux-arm64-{{ runner_tar }}.tar.gz
      {% else %}
      https://github.com/actions/runner/releases/download/{{ latest_version }}/actions-runner-linux-arm-{{ runner_tar }}.tar.gz
      {% endif %}


# # Extract the runner package name from URL

- name: Extract the package name
  set_fact:
    runner_package: "{{ runner_url.split('/')[-1] | trim }}"


# Print package url, os_arch,file name

- name: Print the selected runner URL
  debug:
    msg: "The runner URL is {{ runner_url }}"
- name: Print the extracted runner file name
  debug:
    msg: "{{ runner_package }}"
- name: Print OS architecture
  debug:
    msg: "{{ ansible_facts['architecture'] }}"
# #########

# Download the runner package 
- name: Download the latest runner package in ~/ops directory
  ansible.builtin.get_url:
    url: "{{ runner_url }}"
    dest: "{{ ansible_user_dir }}/ops/{{ runner_package }}"
    mode: '0644'
  become: true

#set owner and group for the downloaded package
- name: Set owner and group for the downloaded file
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/ops/{{ runner_package }}"
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  become: true


### Extracting the Runner Package ###
- name: Extract runner package into each directory
  ansible.builtin.command:
    cmd: "tar -xzf {{ ansible_user_dir }}/ops/{{ runner_package }} -C {{ ansible_user_dir }}/ops/action-runner-{{ repo_directory_mapping[item] }}/{{ item }}"
  loop: "{{ runner_for }}"
  loop_control:
    loop_var: item


# set owner and group for the extracted file
- name: Set owner and group for extracted files
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/ops/action-runner-{{ repo_directory_mapping[item] }}/{{ item }}"
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    recurse: yes
  loop: "{{ runner_for }}"
  loop_control:
    loop_var: item


# # #Install SVC on all runner_for i.e [api,web.backend]
- name: Install SVC for all 
  ansible.builtin.command:
    cmd: "sudo ./svc.sh install"
    chdir: "{{ ansible_user_dir }}/ops/action-runner-{{ repo_directory_mapping[item] }}/{{ item }}"
  loop: "{{ runner_for }}"
  become: true


- name: Start SVC for all
  ansible.builtin.command: 
    cmd: "sudo ./svc.sh start"
    chdir: "{{ ansible_user_dir }}/ops/action-runner-{{ repo_directory_mapping[item] }}/{{ item }}"
  loop: "{{ runner_for }}"
  become: true

- name: Copy uninstall svc script for each service i.e api,backend,frontend
  template:
    src: ../templates/githubaction/svcuninstall.sh.j2
    dest: "{{ ansible_user_dir }}/ops/action-runner-{{ repo_directory_mapping[item] }}/{{ item }}/svcuninstall.sh" 
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0775'
  loop: "{{ runner_for }}" 
  become: true


